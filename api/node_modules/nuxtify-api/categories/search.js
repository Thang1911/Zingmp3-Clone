"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Search = void 0;
const base_1 = require("../base");
class Search extends base_1.Base {
    getResult(q) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const sig = this.createNoIdSig('/api/v2/search/multi');
                return yield this.createRequest('/api/v2/search/multi', {
                    q,
                    sig,
                });
            }
            catch (err) {
                throw err;
            }
        });
    }
    getResultByType(q, type, page = 1) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const sig = this.createSearchSig('/api/v2/search', type, page);
                return yield this.createRequest('/api/v2/search', {
                    q,
                    sig,
                    type,
                    count: 20,
                    page,
                });
            }
            catch (err) {
                throw err;
            }
        });
    }
    getRecommendKeyword() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const sig = this.createNoIdSig('/api/v2/app/get/recommend-keyword');
                return yield this.createRequest('/api/v2/app/get/recommend-keyword', {
                    sig,
                });
            }
            catch (err) {
                throw err;
            }
        });
    }
    getSuggestion(query) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const sig = this.createNoIdSig('/v1/web/ac-suggestions');
                const res = yield fetch('https://ac.zingmp3.vn/v1/web/ac-suggestions?' +
                    new URLSearchParams({
                        sig,
                        query,
                        language: 'vi',
                        num: '10',
                    }));
                const data = yield res.json();
                return data;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.Search = Search;
