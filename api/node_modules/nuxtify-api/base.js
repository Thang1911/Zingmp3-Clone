"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Base = void 0;
const crypto_1 = require("crypto");
const baseURL = 'https://zingmp3.vn';
class Base {
    constructor(apiKey, secretKey) {
        this.version = '0';
        this.ctime = '0';
        this.secretKey = secretKey;
        this.apiKey = apiKey;
    }
    createHash256(params) {
        return (0, crypto_1.createHash)('sha256').update(params).digest('hex');
    }
    createHmac512(str, key) {
        const hmac = (0, crypto_1.createHmac)('sha512', key);
        return hmac.update(str).digest('hex');
    }
    getCookie() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield fetch(baseURL);
                const cookie = (_a = res.headers.get('set-cookie')) === null || _a === void 0 ? void 0 : _a.split('zmp3_rqid')[1];
                return 'zmp3_rqid' + cookie;
            }
            catch (err) {
                throw err;
            }
        });
    }
    createRequest(path, params) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const cookie = yield this.getCookie();
                const searchParams = new URLSearchParams(Object.assign(Object.assign({}, params), { version: this.version, ctime: this.ctime, apiKey: this.apiKey }));
                const res = yield fetch(`${baseURL + path}?${searchParams}`, {
                    headers: {
                        cookie,
                    },
                });
                const data = yield res.json();
                return data;
            }
            catch (err) {
                throw err;
            }
        });
    }
    createHomeSig(path) {
        return this.createHmac512(path +
            this.createHash256(`count=30ctime=${this.ctime}page=1version=${this.version}`), this.secretKey);
    }
    createPodcastSig(path, id, page) {
        return this.createHmac512(path +
            this.createHash256(`count=20ctime=${this.ctime}id=${id}page=${page}version=${this.version}`), this.secretKey);
    }
    createSearchSig(path, type, page) {
        return this.createHmac512(path +
            this.createHash256(`count=20ctime=${this.ctime}page=${page}type=${type}version=${this.version}`), this.secretKey);
    }
    createIdSig(path, id) {
        return this.createHmac512(path +
            this.createHash256(`ctime=${this.ctime}id=${id}version=${this.version}`), this.secretKey);
    }
    createNoIdSig(path) {
        return this.createHmac512(path + this.createHash256(`ctime=${this.ctime}version=${this.version}`), this.secretKey);
    }
    createSuggestSig(path) {
        return this.createHmac512(path +
            this.createHash256(`ctime=${this.ctime}language=vinum=10version=${this.version}`), this.secretKey);
    }
}
exports.Base = Base;
